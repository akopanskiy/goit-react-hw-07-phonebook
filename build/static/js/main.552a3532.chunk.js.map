{"version":3,"sources":["component/ContactList/ContactList.module.css","component/Section/Section.module.css","component/Filter/Filter.module.css","component/ContactForm/Form.module.css","services/contactsAPI.js","redux/actions.js","redux/operations.js","component/ContactForm/ContactForm.js","redux/selectors.js","component/ContactList/ContactList.js","component/Filter/Filter.js","component/Section/Section.js","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","URL","fetchRequest","createAction","fetchSuccess","fetchError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","name","number","dispatch","contact","axios","post","fetchAddContacts","then","data","catch","error","id","delete","fetchDeleteContacts","get","ContactForm","useState","setName","setNumber","useDispatch","nameId","shortid","generate","numberId","handleChange","e","currentTarget","value","className","styles","form","onSubmit","preventDefault","contactsOperations","htmlFor","flexRow","lfInput","type","placeholder","pattern","title","required","onChange","autoComplete","label","lfSubmit","getFilter","state","contacts","filter","getVisibleContacts","items","getItems","normalizedFilter","toLowerCase","item","includes","ContactList","useSelector","useEffect","list","map","contactList","contactsNameNumber","buttonDelete","onClick","Filter","event","contactsAction","Section","children","App","createReducer","payload","find","alert","_","contactsReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.552a3532.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1YWtG\",\"contactList\":\"ContactList_contactList__3StOF\",\"contactsNameNumber\":\"ContactList_contactsNameNumber__TnkYk\",\"buttonDelete\":\"ContactList_buttonDelete__2roqh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Section_form__1iUnf\",\"name\":\"Section_name__gSvX-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lfInput\":\"Filter_lfInput__vXFmm\",\"lf--input\":\"Filter_lf--input__GmfE2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexRow\":\"Form_flexRow__aTI2c\",\"lfInput\":\"Form_lfInput__1km_B\",\"lf--input\":\"Form_lf--input__1y3qm\",\"lfSubmit\":\"Form_lfSubmit__34QuQ\"};","import axios from 'axios';\r\n\r\nconst URL = 'https://phonebook-kopa.herokuapp.com/api/';\r\n\r\nexport const fetchAllContacts = () => {\r\n  return axios.get(`${URL}contacts`);\r\n};\r\n\r\nexport const fetchAddContacts = contact => {\r\n  return axios.post(`${URL}contacts`, contact);\r\n};\r\nexport const fetchDeleteContacts = id => {\r\n  return axios.delete(`${URL}contacts/${id}`);\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchRequest = createAction('contacts / fetchRequest');\r\nexport const fetchSuccess = createAction('contacts / fetchSuccess');\r\nexport const fetchError = createAction('contacts / fetchError');\r\n\r\nexport const addContactRequest = createAction('contacts / addContactRequest');\r\nexport const addContactSuccess = createAction('contacts / addContactSuccess');\r\nexport const addContactError = createAction('contacts / addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts / deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts / deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts / deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/filter');\r\n","import {\r\n  fetchAllContacts,\r\n  fetchAddContacts,\r\n  fetchDeleteContacts,\r\n} from '../services/contactsAPI';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchRequest,\r\n  fetchSuccess,\r\n  fetchError,\r\n} from './actions';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(fetchRequest());\r\n\r\n  fetchAllContacts()\r\n    .then(({ data }) => dispatch(fetchSuccess(data)))\r\n    .catch(error => dispatch(fetchError(error)));\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n  dispatch(addContactRequest());\r\n  fetchAddContacts(contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  fetchDeleteContacts(id)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { addContact, deleteContact, fetchContacts };\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport contactsOperations from '../../redux/operations';\r\n\r\nimport shortid from 'shortid';\r\nimport styles from './Form.module.css';\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  const nameId = shortid.generate();\r\n  const numberId = shortid.generate();\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    dispatch(contactsOperations.addContact(name, number));\r\n\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className={styles.form} onSubmit={handleSubmit}>\r\n        <label htmlFor={nameId}>\r\n          <div className={styles.flexRow}>\r\n            <input\r\n              className={styles.lfInput}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              placeholder=\"Name\"\r\n              value={name}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              onChange={handleChange}\r\n              id={nameId}\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n        </label>\r\n        <label className={styles.label} htmlFor={numberId}>\r\n          <div className={styles.flexRow}>\r\n            <input\r\n              className={styles.lfInput}\r\n              placeholder=\"Number\"\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={number}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              onChange={handleChange}\r\n              id={numberId}\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n        </label>\r\n        <button className={styles.lfSubmit} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","export const getFilter = state => state.contacts.filter;\r\nexport const getItems = state => state.contacts.items;\r\nexport const getVisibleContacts = state => {\r\n  const filter = getFilter(state);\r\n  const items = getItems(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return items.filter(item =>\r\n    item.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getVisibleContacts } from '../../redux/selectors';\r\nimport contactsOperations from '../../redux/operations';\r\nimport styles from './ContactList.module.css';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <ul className={styles.list}>\r\n      {contacts.map(({ name, id, number }) => (\r\n        <li className={styles.contactList} key={id}>\r\n          <span className={styles.contactsNameNumber}>\r\n            {name}: {number}\r\n          </span>\r\n          <button\r\n            className={styles.buttonDelete}\r\n            onClick={() => dispatch(contactsOperations.deleteContact(id))}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport * as contactsAction from '../../redux/actions';\r\nimport { getFilter } from '../../redux/selectors';\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <label>\r\n      <input\r\n        className={styles.lfInput}\r\n        placeholder=\"Find contacts by name\"\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={event =>\r\n          dispatch(contactsAction.changeFilter(event.currentTarget.value))\r\n        }\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Section.module.css';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <div className={styles.form}>\r\n      <h1 className={styles.name}>{title}</h1>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import ContactForm from './component/ContactForm';\r\nimport ContactList from './component/ContactList';\r\nimport Filter from './component/Filter';\r\nimport Section from './component/Section';\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <Section title={'Phonebook'}>\r\n        <ContactForm />\r\n      </Section>\r\n      <Section title={'Contacts'}>\r\n        <Filter />\r\n        <ContactList />\r\n      </Section>\r\n      \r\n    </>\r\n  );\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  fetchSuccess,\r\n  changeFilter,\r\n} from './actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchSuccess]: (state, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) =>\r\n    state.find(({ name }) => name === payload.name)\r\n      ? alert(`${payload.name} вже існує в телефонній книзі.`)\r\n      : [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst contactsReducer = combineReducers({ items, filter });\r\n\r\nexport default contactsReducer;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport contactsReducer from './reducer';\r\nimport logger from 'redux-logger';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: contactsReducer },\r\n  middleware: middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}